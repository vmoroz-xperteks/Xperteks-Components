#This script will do the following
# 1. Test if reboot is required
#    - If reboot required and no one actively using computer, reboot immediately.
#    - If reboot require and active user, pop up an Xperteks branded message asking to reboot
# 2. Check if computer is fully updated, based on the OS release version defined in variables
#    - If computer is fully updated, exit script
#    - If computer is not updated, schedule an update 5 minutes from current time
#

#Variables
$usrShowRestart = $true
$usrMessageContent = "Xperteks support has installed important updates  on your computer. Please reboot your computer to allow the installation to complete."
$usrMessageTitle = "Your computer requires a reboot."
$24H2Release = 3476
$23H2Release = 5039
$Win10Release = 5608

#Check for Windows Update Module and install if not present.
if(-not (Get-Module PSWindowsUpdate -ListAvailable)){
    Install-Module PSWindowsUpdate -Force
}
Update-Module -Name PSWindowsUpdate -Force -Confirm:$false > $null
Import-Module -Name PSWindowsUpdate -Force

function getProxyData {
    if (([IntPtr]::size) -eq 4) {$configLoc="$env:SystemDrive\Program Files\CentraStage\CagService.exe.config"} else {$configLoc="$env:SystemDrive\Program Files (x86)\CentraStage\CagService.exe.config"}
	[xml]$varPlatXML= get-content "$configLoc" -ErrorAction SilentlyContinue
	$script:varProxyLoc=($varPlatXML.configuration.applicationSettings."CentraStage.Cag.Core.AppSettings".setting | Where-Object {$_.Name -eq 'ProxyIp'}).value
    $script:varProxyPort=($varPlatXML.configuration.applicationSettings."CentraStage.Cag.Core.AppSettings".setting | Where-Object {$_.Name -eq 'ProxyPort'}).value
}

function downloadFile { #downloadFile build 31/seagull :: copyright datto, inc.

    param (
        [parameter(mandatory=$false)]$url,
        [parameter(mandatory=$false)]$whitelist,
        [parameter(mandatory=$false)]$filename,
        [parameter(mandatory=$false,ValueFromPipeline=$true)]$pipe
    )

    function setUserAgent {
        $script:WebClient = New-Object System.Net.WebClient
    	$script:webClient.UseDefaultCredentials = $true
        $script:webClient.Headers.Add("X-FORMS_BASED_AUTH_ACCEPTED", "f")
        $script:webClient.Headers.Add([System.Net.HttpRequestHeader]::UserAgent, 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)');
    }

    if (!$url) {$url=$pipe}
    if (!$whitelist) {$whitelist="the required web addresses."}
	if (!$filename) {$filename=$url.split('/')[-1]}
	
    try { #enable TLS 1.2
		[Net.ServicePointManager]::SecurityProtocol = [Enum]::ToObject([Net.SecurityProtocolType], 3072)
    } catch [system.exception] {
		write-host "- ERROR: Could not implement TLS 1.2 Support."
		write-host "  This can occur on Windows 7 devices lacking Service Pack 1."
		write-host "  Please install that before proceeding."
		exit 1
    }
	
	write-host "- Downloading: $url"
    if ($env:CS_PROFILE_PROXY_TYPE -eq "0" -or !$env:CS_PROFILE_PROXY_TYPE) {$useProxy=$false} else {$useProxy=$true}

	if ($useProxy) {
        setUserAgent
        getProxyData
        write-host ": Proxy location: $script:varProxyLoc`:$script:varProxyPort"
	    $script:WebClient.Proxy = New-Object System.Net.WebProxy("$script:varProxyLoc`:$script:varProxyPort",$true)
	    $script:WebClient.DownloadFile("$url","$filename")
		if (!(test-path $filename)) {$useProxy=$false}
    }

	if (!$useProxy) {
		setUserAgent #do it again so we can fallback if proxy fails
		$script:webClient.DownloadFile("$url","$filename")
	} 

    if (!(test-path $filename)) {
        write-host "- ERROR: File $filename could not be downloaded."
        write-host "  Please ensure you are whitelisting $whitelist."
        write-host "- Operations cannot continue; exiting."
        exit 1
    } else {
        write-host "- Downloaded:  $filename"
    }
}

# Function to check if a reboot is required
function Test-PendingReboot {
    $rebootRequired = $false

    # Check the registry for pending reboot flags
    $regPaths = @(
        "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending",
        "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired",
        "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\PendingFileRenameOperations"
    )

    foreach ($path in $regPaths) {
        if (Test-Path $path) {
            $rebootRequired = $true
            break
        }
    }

    return $rebootRequired
}

# Function to check if any user is logged in
function Test-UserLoggedIn {
    $users = Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName
    return [string]::IsNullOrEmpty($users) -eq $false
}

# Function to check for Windows updates and schedule installation
function Schedule-WindowsUpdate {
    #Getting current hour and minute so that it can be adjusted for 2 minutes in to the future. Time later used to schedule install of updates.
    [int]$hour=(get-date -format HH)
    [int]$minute=(get-date -format mm)

    if ($minute -eq 55){
        $hour=$hour+1
        $minute=0
    }
    elseif ($minute -ge 56){
        $hour=$hour+1
        $minute=02
    }
    else {    
        $minute=$minute+5
    }
    write-output "Setting time for $hour hours and $minute minutes."

    #adding an update to the scheduled task for 2 minutes from now.
    Install-WindowsUpdate -MicrosoftUpdate -AcceptAll -IgnoreReboot -UpdateType Software -ScheduleJob (Get-Date -Hour $hour -Minute $minute -Second 0) -Verbose
}

function Display-RebootMessage {
write-host "- Message title:  $usrMessageTitle"
write-host "- Message body:   $usrMessageContent"

#win10 check
[int]$varKernel = ([System.Diagnostics.FileVersionInfo]::GetVersionInfo("C:\Windows\system32\kernel32.dll")).FileBuildPart
if ($varKernel -lt 10240) {
    write-host "! ERROR: This Component only works for Windows 10."
    write-host "  Exiting."
    exit 1
}

#oh in image
if ($env:usrHeroImgURL) {
    downloadFile $env:usrHeroImgURL -filename hero.png
} else {
    downloadFile "https://raw.githubusercontent.com/vmoroz-xperteks/Xperteks-Logo/refs/heads/main/Transparent%20Xperteks%20Icon.png" -filename hero.png
}

#get some data
$varCurrentLocation=$($PWD.Path) -replace '\\','/'
$varBrandLocation="file://$env:ProgramData/CentraStage/Brand" -replace '\\','/'
[xml]$varBrandXML= get-content "$env:ProgramData\CentraStage\Brand\keys.xml" -encoding UTF8 -ErrorAction SilentlyContinue
$varCurrentBrand=($varBrandXML.bundles.bundle.entry | ? {$_.key -eq 'productShortNameText'}).'#text' -replace "[^a-zA-Z0-9\s????????????`'`"!&\.]",''

#make the notifier
New-PSDrive -Name HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT -erroraction silentlycontinue | out-null
New-Item -Path "HKCR:\AppUserModelId" -Name "dRMMNotifier" -Force | out-null
New-ItemProperty -Path "HKCR:\AppUserModelId\dRMMNotifier" -Name DisplayName -Value "$varCurrentBrand" -PropertyType String -Force | out-null
New-ItemProperty -Path "HKCR:\AppUserModelId\dRMMNotifier" -Name ShowInSettings -Value 0 -PropertyType DWORD -Force | out-null

@"
#fill some forms
[Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] | Out-Null
[Windows.Data.Xml.Dom.XmlDocument, Windows.Data.Xml.Dom.XmlDocument, ContentType = WindowsRuntime] | Out-Null

#furnish the toast XML
[xml]`$ToastTemplate = @"
<toast duration="long">
  <visual>
    <binding template="ToastGeneric">
      <text>$usrMessageTitle</text>
      <text placement="attribution">User Notification</text>
      <image placement="hero" src="file://$varCurrentLocation/hero.png"/>
      <image id="1" placement="appLogoOverride" hint-crop="circle" src="$varBrandLocation/primaryLogo.png"/>
        <group>
            <subgroup>
                <text hint-style="body" hint-wrap="true">$usrMessageContent</text>
            </subgroup>
        </group>
    </binding>
  </visual>
"@ | set-content "$env:ProgramData\CentraStage\temp\toastMessage.ps1" -force -Encoding UTF8

#reboot message?
if ($usrShowRestart -match 'true') {
    write-host "- Restart option enabled. User will see a localised option to restart the device."

    #i18n because we're nice like that
    $arrStrings=@{
        1031=[PSCustomObject]@{Caption="German";            rebootString="Jetzt neu starten"}
        1033=[PSCustomObject]@{Caption="English (American)";rebootString="Restart now"}
        1034=[PSCustomObject]@{Caption="Spanish (European)";rebootString="Reiniciar ahora"}
        1036=[PSCustomObject]@{Caption="French";            rebootString="Red?marrer maintenant"}
        1040=[PSCustomObject]@{Caption="Italian";           rebootString="Riavvia ora"}
        1043=[PSCustomObject]@{Caption="Dutch";             rebootString="Nu opnieuw opstarten"}
        2057=[PSCustomObject]@{Caption="English (British)"; rebootString="Restart now"}
        2058=[PSCustomObject]@{Caption="Spanish (Mexican)"; rebootString="Reiniciar ahora"}
    }

    [int]$varLangCode=cmd /c set /a 0x$((Get-ItemProperty hklm:\system\controlset001\control\nls\language -name InstallLanguage).InstallLanguage)
    $varRebootLocalised=$arrStrings[$varLangCode].rebootString
    if (!$varRebootLocalised) {
        write-host ": System Language: Unsupported; Restart option, if enabled, will appear in English"
        $varRebootLocalised="Restart now"
    } else {
        write-host ": System Language: $($arrStrings[$varLangCode].Caption)"
    }

    #protocol handler to reboot :: kelvin tegelaar, cyberdrain.com
    if (!(get-item 'HKCR:\ToastReboot' -erroraction 'silentlycontinue')) {
        #create handler for reboot
        New-item 'HKCR:\ToastReboot' -force | out-null
        set-itemproperty 'HKCR:\ToastReboot' -name '(DEFAULT)' -value 'url:ToastReboot' -force | out-null
        set-itemproperty 'HKCR:\ToastReboot' -name 'URL Protocol' -value '' -force | out-null
        new-itemproperty -path 'HKCR:\ToastReboot' -propertytype dword -name 'EditFlags' -value 2162688 | out-null
        New-item 'HKCR:\ToastReboot\Shell\Open\command' -force | out-null
        set-itemproperty 'HKCR:\ToastReboot\Shell\Open\command' -name '(DEFAULT)' -value 'C:\Windows\System32\shutdown.exe -r -t 10' -force | out-null
    }

    #add the action to the XML
    add-content -path "$env:ProgramData\CentraStage\temp\toastMessage.ps1" -Value "<actions><action content=`"$varRebootLocalised`" arguments=`"ToastReboot:\\`" activationType=`"protocol`" /></actions>" -force -Encoding UTF8
    } else {
    add-content -path "$env:ProgramData\CentraStage\temp\toastMessage.ps1" -Value "<actions/>" -force -Encoding UTF8
    write-host "- Restart option has not been enabled."
}

#finish off the XML
@"
</toast>
`"@
`$ToastXml = [Windows.Data.Xml.Dom.XmlDocument]::New()
`$ToastXml.LoadXml(`$ToastTemplate.OuterXml)
`$ToastMessage = [Windows.UI.Notifications.ToastNotification]::New(`$ToastXML)
[Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier("dRMMNotifier").Show(`$ToastMessage)
"@ | add-content "$env:ProgramData\CentraStage\temp\toastMessage.ps1" -force -Encoding UTF8

#PSRun :: michael mccool, the miller group
@'
Set objShell = CreateObject("Wscript.Shell")
Set args = Wscript.Arguments
For Each arg In args
	objShell.Run("powershell -windowstyle hidden -executionpolicy bypass -noninteractive ""&"" ""'" & arg & "'"""),0
Next
'@ | set-content "$env:ProgramData\CentraStage\temp\PSRun.vbs" -Force

    if (query user) { #run tasks as the logged-in user :: jon north, seagull :: build 8
    #run 'query user' and output its data as a string to get the localised name of the first object
    $varUsers=(((query user) -replace '>', '') -replace '\s{2,}', ',' | ConvertFrom-Csv)
    $varUNLocal=($varUsers -as [string]).split('=')[0] -replace '@{',''
    #run 'query user' again and pass the localised data from the first object AS an object TO schtasks
    (((query user) -replace '>', '') -replace '\s{2,}', ',' | ConvertFrom-Csv).$varUNLocal | % {
        if ($_) {
            $varCurrentUser=$_
            #find the user-domain for this user from the registry
            Get-ChildItem "Registry::HKEY_USERS\" | ? { $_.PSIsContainer } | % {
                if ((Get-ItemProperty "Registry::$_\Volatile Environment" -Name USERNAME -ErrorAction SilentlyContinue).USERNAME -match $varCurrentUser) {
                    $varCurrentDomain=$((Get-ItemProperty "Registry::$_\Volatile Environment" -Name USERDOMAIN -ErrorAction SilentlyContinue).USERDOMAIN)
                }
            }
            #now we have all the data, schedule the task
            schtasks /create /sc hourly /tn "Toaster message for $varCurrentUser" /tr "wscript `"$env:ProgramData\CentraStage\temp\PSRun.vbs`" `"$env:ProgramData\CentraStage\temp\toastMessage.ps1`"" /st $(([DateTime]::Now.AddMinutes(2)).ToString("HH:mm")) /et $(([DateTime]::Now.AddMinutes(4)).ToString("HH:mm")) /ru "$varCurrentDomain\$varCurrentUser" /f /z
            write-host "- Message has been scheduled to appear for user $varCurrentDomain\$varCurrentUser."
        }
    }
} else {
        write-host "! ERROR: Cannot display a toast message as no users are logged on to receive it."
        exit
    }

}

function Is-WindowsHome {
    # Get the Windows edition
    $edition = (Get-WmiObject -Class Win32_OperatingSystem).OperatingSystemSKU

    # Windows Home editions have specific SKU numbers
    $homeSKUs = @(1, 101, 103, 121, 123, 125, 133, 135, 138, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255)

    # Check if the edition is one of the Home editions
    if ($homeSKUs -contains $edition) {
        return $true
    } else {
        return $false
    }
}

Function Check_Toast_Required_Files {
    $folderPath = "$env:ProgramData\CentraStage\temp\"
    if (-Not (Test-Path -Path $folderPath -PathType Container)) {
        New-Item -Path "$env:ProgramData\CentraStage\" -Name "temp" -ItemType "directory"
    }
    $filePath = "$env:ProgramData\CentraStage\temp\toastMessage.ps1"
    if (-Not (Test-Path -Path $filePath -PathType Leaf)) {
       Copy-Item "toastMessage.ps1" -Destination "$folderPath"
    }
    $filePath2 = "$env:ProgramData\CentraStage\temp\PSRun.vbs"
    if (-Not (Test-Path -Path $filePath2 -PathType Leaf)) {
	    Copy-Item "PSRun.vbs" -Destination "$folderPath"
    }
}
Function Check-If-Fully-Updated {
    #Check for for Windows OS version. 
    $isWin11=(Get-WmiObject Win32_OperatingSystem).Caption -Match "Windows 11"
    $isWin10=(Get-WmiObject Win32_OperatingSystem).Caption -Match "Windows 10"

    #Get OS Build and exist if latest version
    $OSInfo = ([Environment]::OSVersion.Version)
    [int]$OSMajorVersion = $OSInfo.build
    [int]$OSBuild=(Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -Name UBR)

    #Check for update variables
#    if ($env:24H2Release -eq $null) -or  ($env:23H2Release -eq $null) -or ($env:Win10Release -eq $null) {
#        throw "You must specify the max OS Release"
#        break script
#    }

    #Check for OS build and release. If it is already latest, exit script.    
    if ($isWin11) {
        if (($OSBuild -ge $23H2Release) -and ($OSMajorVersion -ge 22631)){
        	#Windows 11 23H2
            New-ItemProperty -Path "HKLM:\SOFTWARE\CentraStage" -Name Custom4 -Value "Fully Updated" -Force | Out-Null
            write-output "Computer has latest updates. No further action required."
            break script
        }
        elseif (($OSBuild -ge $24H2Release) -and ($OSMajorVersion -ge 26100)){
	        #Windows 11 24H2
            New-ItemProperty -Path "HKLM:\SOFTWARE\CentraStage" -Name Custom4 -Value "Fully Updated" -Force | Out-Null
            write-output "Computer has latest updates. No further action required."
            break script
        }

    }
    elseif ($isWin10) {
        if (($OSBuild -ge $Win10Release) -and ($OSMajorVersion -ge 19045)){
            #Windows 10 22H2
            New-ItemProperty -Path "HKLM:\SOFTWARE\CentraStage" -Name Custom4 -Value "Fully Updated" -Force | Out-Null
            write-output "Computer has latest updates. No further action required."
            break script
        }
    }
    else {
        throw "Unsupported OS Version. Script only runs on Windows 11 and Windows 10."
        break script
    }
    New-ItemProperty -Path "HKLM:\SOFTWARE\CentraStage" -Name Custom4 -Value "Missing Updates" -Force | Out-Null
}


# Main script logic


    
Check_Toast_Required_Files

if (Test-PendingReboot) {
    New-ItemProperty -Path "HKLM:\SOFTWARE\CentraStage" -Name Custom4 -Value "Pending Reboot" -Force | Out-Null
    if (-not (Test-UserLoggedIn)) {
        Restart-Computer -Force
    } else {
        If (Is-WindowsHome) {
            Write-Host "Windows Home edition is not suported. Skipping toast message"
        } Else { 
            Display-RebootMessage
        }
    }
} else {
    Write-Output "No reboot is required. Checking for Windows updates..."
    Check-If-Fully-Updated
    Schedule-WindowsUpdate
}
